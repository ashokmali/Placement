# edge list to adjacency list

import collections
graph = collections.defaultdict(list)
for a, b in edges:
    graph[a].append(b)
    graph[b].append(a)
    
---------------------------------------------------------------------------------------------------------------------
    
"""
A Python program to demonstrate the adjacency
list representation of the graph
"""
 
# A class to represent the adjacency list of the node
 
 
class AdjNode:
    def __init__(self, data):
        self.vertex = data
        self.next = None
 
 
# A class to represent a graph. A graph
# is the list of the adjacency lists.
# Size of the array will be the no. of the
# vertices "V"
class Graph:
    def __init__(self, vertices):
        self.V = vertices
        self.graph = [None] * self.V
 
    # Function to add an edge in an undirected graph
    def add_edge(self, src, dest):
        # Adding the node to the source node
        node = AdjNode(dest)
        node.next = self.graph[src]
        self.graph[src] = node
 
        # Adding the source node to the destination as
        # it is the undirected graph
        node = AdjNode(src)
        node.next = self.graph[dest]
        self.graph[dest] = node
 
    # Function to print the graph
    def print_graph(self):
        for i in range(self.V):
            print("Adjacency list of vertex {}\n head".format(i), end="")
            temp = self.graph[i]
            while temp:
                print(" -> {}".format(temp.vertex), end="")
                temp = temp.next
            print(" \n")
 
 
# Driver program to the above graph class
if __name__ == "__main__":
    V = 5
    graph = Graph(V)
    graph.add_edge(0, 1)
    graph.add_edge(0, 4)
    graph.add_edge(1, 2)
    graph.add_edge(1, 3)
    graph.add_edge(1, 4)
    graph.add_edge(2, 3)
    graph.add_edge(3, 4)
 
    graph.print_graph()
 
--------------------------------------------------------------------------------------------------------------------------------------------

# Python3 program to represent adjacency
# list using dictionary
from collections import defaultdict
 
class graph(object):
 
    def __init__(self, v):
         
        self.v = v
        self.graph = defaultdict(set)
 
    # Adds an edge to undirected graph
    def addEdge(self, source, destination):
         
        # Add an edge from source to destination.
        # If source is not present in dict add source to dict
        self.graph.add(destination)
 
        # Add an dge from destination to source.
        # If destination is not present in dict add destination to dict
        self.graph[destination].add(source)
 
    # A utility function to print the adjacency
    # list representation of graph
    def print(self):
         
        for i, adjlist in sorted(self.graph.items()):
            print("Adjacency list of vertex ", i)
            for j in sorted(adjlist, reverse = True):
                    print(j, end = " ")
                         
            print('\n')
             
    # Search for a given edge in graph
    def searchEdge(self,source,destination):
         
        if source in self.graph:
            if destination in self.graph:
                if destination in self.graph:
                    if source in self.graph[destination]:
                        print("Edge from {0} to {1} found.\n".format(source, destination))
                        return
                    else:
                        print("Edge from {0} to {1} not found.\n".format(source, destination))
                        return
                else:
                    print("Edge from {0} to {1} not found.\n".format(source, destination))
                    return
            else:
                print("Destination vertex {} is not present in graph.\n".format(destination))
                return
        else:
            print("Source vertex {} is not present in graph.\n".format(source))
         
# Driver code
if __name__=="__main__":
     
    g = graph(5)
     
    g.addEdge(0, 1)
    g.addEdge(0, 4)
    g.addEdge(1, 2)
    g.addEdge(1, 3)
    g.addEdge(1, 4)
    g.addEdge(2, 3)
    g.addEdge(3, 4)
 
    # Print adjacenecy list
    # representation of graph
    g.print()
 
    # Search the given edge in a graph
    g.searchEdge(2, 1)
    g.searchEdge(0, 3)
 
 
--------------------------------------------------------------------------------------------------------------------------------------------

# adjacency matrix representation

#  n is the number of vertices
#  m is the number of edges
n, m = map(int, input().split())
adjMat = [[0 for i in range(n)]for j in range(n)]
for i in range(n):
    u, v = map(int, input().split())
    adjMat[u][v] = 1
    adjMat[v][u] = 1
